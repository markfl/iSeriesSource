          Ctl-opt NoMain Option(*NoDebugio);

          Dcl-f qadspffd         Usage(*Input)  UsrOpn;
          Dcl-f qafdaccp         Usage(*Input)  UsrOpn;
          Dcl-f qafdjoin         Usage(*Input)  UsrOpn;
          Dcl-f qafdselo         Usage(*Input)  UsrOpn;
          Dcl-f qafdrfmt         Usage(*Input)  UsrOpn;
          Dcl-f qddssrc Disk(92) Usage(*Output) UsrOpn;

          Dcl-Ds @ASpecDs Len(92);
             @Seq   Zoned(6:2);
             @Date  Zoned(6);
             @ASpec Char(1)  Pos(18);
             @SSize Char(4)  Pos(21);
             @R     Char(1)  Pos(29);
             @Field Char(10) Pos(31);
             @Ref   Char(1)  Pos(41);
             @Size  Char(4)  Pos(43);
             @Type  Char(1)  Pos(47);
             @Dec   Char(2)  Pos(48);
             @InOut Char(1)  Pos(50);
             @Line  Char(3)  Pos(51);
             @Pos   Char(3)  Pos(54);
             @Text  Char(36) Pos(57);
          End-Ds;

          Dcl-s @Text1 Char(35);
          Dcl-s @Text2 Char(35);

          Dcl-Proc CheckForUnique export;

          Dcl-Pi CheckForUnique Ind;
          End-Pi;

          Dcl-s @SelectCount Packed(3:0) Inz(*Zeros);

          // Check for substring fields
          Exec SQL Select Count(*) Into :@SelectCount
          from qafdaccp where apuniq = 'Y';

b001      If @SelectCount > *Zeros;
             Return *On;
x001      Else;
             Return *Off;
e001      EndIf;

          End-Proc;

          Dcl-Proc CheckForJoin export;

          Dcl-Pi CheckForJoin Ind;
          End-Pi;

          Dcl-s @SelectCount Packed(3:0) Inz(*Zeros);

          // Check for substring fields
          Exec SQL Select Count(*) Into :@SelectCount
          from qafdjoin where jnnspc > 0;

b001      If @SelectCount > *Zeros;
             Return *On;
x001      Else;
             Return *Off;
e001      EndIf;

          End-Proc;

          Dcl-Proc rtvddssource export;

          Dcl-Pi rtvddssource;
             @FileAtr  Char(10) Const;
             @DefByRef Ind      Const;
             @Join     Ind      Const;
             @Unique   Ind      Const;
          End-Pi;

          /define mflores080
          /define mflores081
          /define mflores082
          /define mflores083
          /define mflores084
          /define mflores101
          /define mflores131
          /define mflores132
          /define mflores133
          /define mflores134
          /define mflores135
          /define mflores137
          /define mflores138
          /define mflores139
          /define mflores140
          /define mflores142
          /define mflores143
          /define mflores144
          /copy qcpysrc,mflores
          /undefine mflores080
          /undefine mflores081
          /undefine mflores082
          /undefine mflores083
          /undefine mflores084
          /undefine mflores101
          /undefine mflores131
          /undefine mflores132
          /undefine mflores133
          /undefine mflores134
          /undefine mflores135
          /undefine mflores137
          /undefine mflores138
          /undefine mflores139
          /undefine mflores140
          /undefine mflores142
          /undefine mflores143
          /undefine mflores144

          Dcl-Ds @ReturnDropDs LikeDs(@SFLDROPReturnDs);

          Dcl-Ds @SpcKeyDs;
             @SpcKey Like(@FieldDs.@FldSpcKeys) Dim(30);
          End-Ds;
          Dcl-s @SpcKeyIdx Int(10)      Inz(%Elem(@Spckey));
          Dcl-s @SpcKeyCtr Int(10)      Inz(*Zeros);

          Dcl-Ds @ReturnValue;
             @Ind Char(1) Dim(99);
          End-Ds;

          Dcl-s @Whname         Like(whname) Inz(*Blanks);
          Dcl-s @SflSize        Int(10)      Inz(*Zeros)  Dim(2);
          Dcl-s @SflPage        Int(10)      Inz(*Zeros)  Dim(2);
          Dcl-s @SFLEnd         Char(20)     Inz(*Blanks) Dim(16);
          Dcl-s @SflRcdNbr      Int(10)      Inz(*Zeros)  Dim(16);
          Dcl-s @SFLOffSet      Int(10)      Inz(*Zeros)  Dim(16);
          Dcl-s @Start          Packed(5)    Inz(*Zeros);
          Dcl-s @a              Packed(5)    Inz(*Zeros);
          Dcl-s @b              Packed(5)    Inz(*Zeros);
          Dcl-s @Default        Char(4)      Inz(*Blanks);
          Dcl-s @StartLine      Int(10)      Inz(*Zeros);
          Dcl-s @StartPosition  Int(10)      Inz(*Zeros);
          Dcl-s @WindowLine     Int(10)      Inz(*Zeros);
          Dcl-s @WindowPosition Int(10)      Inz(*Zeros);
          Dcl-s @ReturnValueOff Int(5)       Inz(*Zeros)  Dim(99);

b001      If not %Open(qadspffd);
             Open qadspffd;
             Open qddssrc;
b002         If @FileAtr <> 'DSPF';
                Open qafdaccp;
x002         Else;
                Open qafdrfmt;
e002         EndIf;
             @Seq = 1;
e001      EndIf;

b001      If @Unique;
             ClearFields();
             @Text = 'UNIQUE';
             Write qddssrc @ASpecDs;
e001      EndIf;

b001      If @Join;
             Open qafdselo;
             Read qwhfdso;
b002         If Not %Eof(qafdselo);
b003            If sodyns = 'Y';
                   ClearFields();
                   @Text = 'DYNSLT';
                   Write qddssrc @ASpecDs;
e003            EndIf;
e002         EndIf;
             Close qafdselo;
e001      EndIf;

b001      If @FileAtr <> 'DSPF';

             Read qwhfdacp;

x001      Else;

             Read qwhfdfmt;

             @DisplayFileRcdDs.@File    = rffile;
             @DisplayFileRcdDs.@Library = rflib;
             @DisplayFileRcdDs.@Format  = rfname;

b002         If @GetFieldNamesAndConstants(@DisplayFileRcdDs:
                                           @FieldNumber: @FieldDs);

b003            For @FieldCntr = 1 To @FieldNumber;

                   %Occur(@FieldDs)     = @FieldCntr;

                   @RcdFmt(@FieldCntr)  = @FieldDs.@FmtNam;
                   @FieldA(@FieldCntr)  = @FieldDs.@FldNam;
                   @SpcKeys(@FieldCntr) = @FieldDs.@FldSK;
                   @IBuf(@FieldCntr)    = @FieldDs.@FldIBuf;
                   @OBuf(@FieldCntr)    = @FieldDs.@FldOBuf;

e003            EndFor;
e002         EndIf;
e001      EndIf;

          Read qwhdrffd;
b001      Dow not %Eof(qadspffd);

             ClearFields();

b002         If  @FileAtr <> 'DSPF';
b003            If Not @Join;

b004               If @Seq = 1;
                      @R = 'R';
                      @Field = whname;
b005                  If apfatr = 'LF  ';
                         @Text = 'PFILE(' + %Trim(apbof) + ')';
e005                  EndIf;
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();

                      @DisplayFileRcdDs.@Format  = whname;

e004               EndIf;
x003            Else;

b004               If @Seq = 1;

                      WriteJoinFileRcdFmt();
                      WriteJoinFileJRec(2);
                      WriteJoinFileJRec(3);
                      WriteJoinFileJRec(4);

e004               EndIf;
e003            EndIf;
e002         EndIf;
             @Field = whflde;

b002         If  @FileAtr = 'PF'
             And @DefByRef
             And whrfil <> *Blanks;

                @Text = 'REFFLD(' + %Trim(whrfld) + ' '
                                  + %Trim(whrfil) + ')';

                @Ref = 'R';
                Write qddssrc @ASpecDs;

                ClearFields();
                WriteTextLine();
                WriteColumnHeadingLine();

x002         ElseIf  @FileAtr = 'LF'
             And     @Join;

                @Text = 'JREF(' + %Char(whjref) + ')';
                Write qddssrc @ASpecDs;

x002         ElseIf  @FileAtr = 'LF';

                Write qddssrc @ASpecDs;

x002         ElseIf  @FileAtr = 'DSPF';

b003            If @Seq = 1;

b004               If @GetScreenSize(@DisplayFileRcdDs: @ReturnValueDs);
                      ClearFields();
                      @Text = 'DSPSIZ(' + %Trim(@Dimension1) + ' ' + @Size1;
b005                  If @ReturnValue2 <> *Blanks;
                         @Text = %Trim(@Text) + ' ' + %Trim(@Dimension2)
                               + ' ' + @Size2;
e005                  EndIf;
                      @Text = %Trim(@Text) + ')';
                      Write qddssrc @ASpecDs;
                      ClearFields();
e004               EndIf;


                   @R = 'R';
                   @Field = whname;
b004               If rftype = 2;
                      @Text = 'SFL';
b005               // If @GetFileLevelIndicators(@DisplayFileRcdDs:
                   //                            @ReturnValue:
                   //                            @ReturnValueOff);
e005               // EndIf;
e004               EndIf;
                   Write qddssrc @ASpecDs;
                   Clear @R;
                   ClearFields();

b004               If @GetSpecialKeys(@DisplayFileRcdDs:@RollUp);
                      @Text = 'ROLLUP';
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();
e004               EndIf;

b004               If @GetSpecialKeys(@DisplayFileRcdDs:@RollDown);
                      @Text = 'ROLLDOWN';
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();
e004               EndIf;

b004               If @GetSpecialKeys(@DisplayFileRcdDs:@Print);
                      @Text = 'PRINT';
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();
e004               EndIf;

b004               If @GetSpecialKeys(@DisplayFileRcdDs:@Help);
                      @Text = 'HELP';
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();
e004               EndIf;
x003            Else;
b004               If @Whname <> whname;

                      @DisplayFileRcdDs.@Format  = whname;

b005               // If @GetFileLevelIndicators(@DisplayFileRcdDs:
                   //                            @ReturnValue:
                   //                            @ReturnValueOff);
e005               // EndIf;

                      Exsr Process_Constants;

                      Read qwhfdfmt;
b005                  If rftype = 2;
                         @Text = 'SFL';
x005                  ElseIf rftype = 4;
                         @Text = 'SFLCTL(' + %Trim(rfasfn) + ')';
e005                  EndIf;
                      @R = 'R';
                      @Field = whname;
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();

b005                  If @CheckForWindow(@DisplayFileRcdDs:
                                         @Default:
                                         @StartLine:
                                         @StartPosition:
                                         @WindowLine:
                                         @WindowPosition);
                         ClearFields();
                         @Text = 'WINDOW(';
b006                     If @Default = *Blanks;
                            @Text = %Trim(@Text) +       %Char(@StartLine)
                                                 + ' ' + %Char(@StartPosition)
                                                 + ' ' + %Char(@WindowLine)
                                                 + ' ' + %Char(@WindowPosition)
                                                 + ')';
x006                     Else;
                            @Text = %Trim(@Text) +       @Default
                                                 + ' ' + %Char(@WindowLine)
                                                 + ' ' + %Char(@WindowPosition)
                                                 + ')';
e006                     EndIf;

                         Write qddssrc @ASpecDs;
e005                  EndIf;

                      GetCommandKeys(@DisplayFileRcdDs);

b005                  If @GetSpecialKeys(@DisplayFileRcdDs:@RollUp);
                         @Text = 'ROLLUP';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();
e005                  EndIf;

b005                  If @GetSpecialKeys(@DisplayFileRcdDs:@RollDown);
                         @Text = 'ROLLDOWN';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();
e005                  EndIf;

b005                  If @GetSpecialKeys(@DisplayFileRcdDs:@Print);
                         @Text = 'PRINT';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();
e005                  EndIf;

b005                  If @GetSpecialKeys(@DisplayFileRcdDs:@Help);

                         @Text = 'HELP';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();

e005                  EndIf;

b005                  If rftype = 4;

b006                     If @GetSubfileSize(@DisplayFileRcdDs: @SflSize);

                            @SSize = @Size1;
                            @Text = 'SFLSIZ(' + %Char(@SflSize(1)) + ')';
                            Write qddssrc @ASpecDs;
                            Clear @R;
                            ClearFields();

b007                        If @SflSize(2) > *Zeros;
                               @SSize = @Size2;
                               @Text = 'SFLSIZ(' + %Char(@SflSize(2)) + ')';
                               Write qddssrc @ASpecDs;
                               Clear @R;
                               ClearFields();
e007                        EndIf;
e006                     EndIf;

b006                     If @GetSubfilePage(@DisplayFileRcdDs: @SflPage);

                            @SSize = @Size1;
                            @Text = 'SFLPAG(' + %Char(@SflPage(1)) + ')';
                            Write qddssrc @ASpecDs;
                            Clear @R;
                            ClearFields();

b007                        If @SflPage(2) > *Zeros;

                               @SSize = @Size2;
                               @Text = 'SFLPAG(' + %Char(@SflPage(2)) + ')';
                               Write qddssrc @ASpecDs;
                               Clear @R;
                               ClearFields();

e007                        EndIf;
e006                     EndIf;

b006                     If @GetSubfileCSRRRN(@DisplayFileRcdDs:
                                              @SFLEnd:@SflRcdNbr);
                            @a = %Lookup(rfname:@RcdFmt);
                            @a -= 2;
b007                        For @Start = 1 To 16;
b008                           If @SFLEnd(@Start) <> *Blanks;
b009                              If @SflRcdNbr(@Start) = *Zeros;
                                     @Text = @SFLEnd(@Start);
x009                              Else;
                                     @Text = %Trim(@SFLEnd(@Start)) + '(&' +
                                     %Trim(@Fielda(@SflRcdNbr(@Start)+@a)) +
                                     ')';
e009                              EndIf;
                                  Write qddssrc @ASpecDs;
                                  Clear @R;
                                  ClearFields();
x008                           Else;
                                  Leave;
e008                           EndIf;
e007                        EndFor;
e006                     EndIf;

                         @Text = 'SFLDSP';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();
                         @Text = 'SFLDSPCTL';
                         Write qddssrc @ASpecDs;
                         Clear @R;
                         ClearFields();

b006                     If @GetSubfileDrop(@DisplayFileRcdDs:@ReturnDropDs);

                            @Text = 'SFLDROP(' + @ReturnDropDs.@CMDKey + ')';
                            Write qddssrc @ASpecDs;
                            Clear @R;
                            ClearFields();

e006                     EndIf;

b006                     If @GetSubfileSFLEnd(@DisplayFileRcdDs:@SFLEnd:
                                              @SflRcdNbr: @SflOffSet);
                            @a = %Lookup(rfname:@RcdFmt);
b007                        For @Start = 1 To 16;
b008                           If @SFLEnd(@Start) <> *Blanks;
                                  @Text = @SFLEnd(@Start);
b009                              If @SflRcdNbr(@Start) > *Zeros;

                                     @InOut = 'H';
                                     @Type  = 'S';
                                     Evalr @Size =
                                           %EditC(@SflRcdNbr(@Start):'Z');
                                     @Dec  = ' 0';

e009                              EndIf;

b009                              If @SflOffSet(@Start) = *Zeros;
x009                              Else;

                                     @b = %Lookup(@SflOffSet(@Start):@OBuf);
                                     @Field = %Trim(@Fielda(@b));
                                     Clear @Fielda(@b);

e009                              EndIf;

                                  Write qddssrc @ASpecDs;
                                  Clear @R;
                                  ClearFields();

x008                           Else;

                                  Leave;

e008                           EndIf;
e007                        EndFor;
e006                     EndIf;
e005                  EndIf;
e004               EndIf;
e003            EndIf;

b003            If %Subst(whflde:1:3) = '*IN';
                   @Whname = whname;
                   Read qwhdrffd;
                   @Seq += 1;
                   Iter;
e003            EndIf;

                @Start = %LookUp(whflde:@Fielda);
b003            If @Start > *Zeros;
                   @Field = whflde;
b004               If whdrow > *Zeros;
                      Evalr @Line = %Char(whdrow);
                      Evalr @Pos  = %Char(whdcol);
                      @InOut = whfiob;
x004               Else;
                      @InOut = 'H';
e004               EndIf;

b004               If  whrfld <> *Blanks
                   And @DefByRef;
                      @Ref = 'R';
                      @Text = 'REFFLD(' + %Trim(whrfld) + ' '
                                        + %Trim(whrfil) + ')';
x004               Else;
                      @Type  = whshft;
b005                  If whfldd > *Zeros;
                         Evalr @Size = %editc(whfldd:'Z');
                         @Dec  = %editw(whfldp:'0 ');
x005                  Else;
                         evalr @Size = %editc(whfldb:'Z');
e005                  EndIf;
e004               EndIf;

                   Write qddssrc @ASpecDs;
                   Clear @R;
                   ClearFields();

b004               If whecde <> *Blanks;
                      @Text = 'EDTCDE(' + %Trim(whecde) + ')';
                      Write qddssrc @ASpecDs;
                      Clear @R;
                      ClearFields();
e004               EndIf;
e003            EndIf;

b003            If whflde <> *Blanks;
                   @Start = %LookUp(whflde:@Fielda);
b004               If @Start > *Zeros;
b005                  If @SpcKeys(@Start) <> *Blanks;
                         @SpcKeyDs = @SpcKeys(@Start);
b006                     For @Start = 1 To @SpcKeyIdx;
b007                        If @SpcKey(@Start) <> *Blanks;
                               @Text = @SpcKey(@Start);
                               Write qddssrc @ASpecDs;
                               Clear @R;
                               ClearFields();
x007                        Else;
                               Leave;
e007                        EndIf;
e006                     EndFor;
e005                  EndIf;
e004               EndIf;
e003            EndIf;

x002         Else;

b003            If whrfil = *Blanks
                Or Not @DefByRef;
                   @Type = whfldt;
b004               If whfldd > *Zeros;
                      evalr  @Size = %editc(whfldd:'Z');
                      @Dec  = %editw(whfldp:'0 ');
x004               Else;
                      evalr @Size = %editc(whfldb:'Z');
e004               EndIf;
x003            Else;
                   @Ref = 'R';
e003            EndIf;

                WriteTextLine();
                WriteColumnHeadingLine();
e002         EndIf;

             @Whname = whname;

             Read qwhdrffd;
             @Seq += 1;

e001      EndDo;

b001      If  @FileAtr <> 'DSPF'
          And apnkyf    > *Zeros;

b002         Dow not %Eof(qafdaccp);

                ClearFields();

                @Field = apkeyf;
                @R = 'K';

b003            If apkseq = 'D';
                   @Text = 'DESCEND';
e003            EndIf;

                Write qddssrc @ASpecDs;

                Read qwhfdacp;
                @Seq += 1;
e002         EndDo;
e001      EndIf;

b001      If  @FileAtr = 'LF';
             WriteSelect();
e001      EndIf;

b001      If @FileAtr = 'DSPF';

             Exsr Process_Constants;

e001      EndIf;

          Close qafdrfmt;
          Close qadspffd;
          Close qafdaccp;
          Close qddssrc;

          // ------------------------------------------------
          // Process Constants
          // ------------------------------------------------
          BegSr Process_Constants;

             ClearFields();
             @Start = %LookUp(@Whname:@RcdFmt);

b001         If @Start > *Zeros;
b002            For @FieldCntr = @Start To @FieldNumber;

b003               If @RcdFmt(@FieldCntr)  = @Whname;

                      %Occur(@FieldDs) = @FieldCntr;

b004                  If  @FieldDs.@FldIO   = 'C'
                      And @FieldDs.@FldCom <> *blanks;

b005                     If @FieldDs.@FldCom2 = *Blanks;

                            @Text = '''' + %Trim(@FieldDs.@FldCom) + '''';
                            Evalr @Line = %Char(@FieldDs.@FldRow);
                            Evalr @Pos  = %Char(@FieldDs.@FldCol);
                            Write qddssrc @ASpecDs;
                            ClearFields();

x005                     Else;

                            @Text = '''' + @FieldDs.@FldCom1 + '-';
                            Evalr @Line = %Char(@FieldDs.@FldRow);
                            Evalr @Pos  = %Char(@FieldDs.@FldCol);
                            Write qddssrc @ASpecDs;
                            ClearFields();

b006                        If @FieldDs.@FldCom3 = *Blanks;

                               @Text = %Trim(@FieldDs.@FldCom2) + '''';
                               Write qddssrc @ASpecDs;
                               ClearFields();

x006                        Else;

                               @Text = @FieldDs.@FldCom2 + '-';
                               Write qddssrc @ASpecDs;
                               ClearFields();

                               @Text = '''' + %Trim(@FieldDs.@FldCom3) + '''';
                               Write qddssrc @ASpecDs;
                               ClearFields();

e006                        EndIf;
e005                     EndIf;

b004                     If @SpcKeys(@FieldCntr) <> *Blanks;
                            @SpcKeyDs = @SpcKeys(@FieldCntr);
b005                        For @SpcKeyCtr = 1 To @SpcKeyIdx;
b006                           If @SpcKey(@SpcKeyCtr) <> *Blanks;

                                  @Text = @SpcKey(@SpcKeyCtr);
                                  Write qddssrc @ASpecDs;
                                  Clear @R;
                                  ClearFields();

x006                           Else;

                                  Leave;

e006                           EndIf;
e005                        EndFor;
e004                     EndIf;
e004                  EndIf;
e003               EndIf;
e002            EndFor;
e001         EndIf;
          EndSr;

          End-Proc;

          Dcl-Proc ClearFields;

          Dcl-Pi ClearFields;
          End-Pi;

          Clear @Date;
          @ASpec = 'A';
          Clear @R;
          Clear @Field;
          Clear @Ref;
          Clear @SSize;
          Clear @Size;
          Clear @Type;
          Clear @Dec;
          Clear @InOut;
          Clear @Line;
          Clear @Pos;
          Clear @Text;

          End-Proc;

          Dcl-Proc WriteTextLine;

          Dcl-Pi WriteTextLine;
          End-Pi;

          Dcl-s @Len Packed(5:0) Inz(*Zeros);

b001      If whftxt <> *Blanks;
             @Len = %Len(%Trim(WHFTXT));
b002         If @Len > 28;
                @Text = 'TEXT(''' + %Trim(%SubSt(WHFTXT:1:28)) + '-';
x002         Else;
                @Text = 'TEXT(''' + %Trim(WHFTXT) + ''')';
e002         EndIf;
e001      EndIf;

          Write qddssrc @ASpecDs;

b001      If whftxt <> *Blanks;
b002         If @Len > 28;

                ClearFields();
                @Text = %Trim(%SubSt(WHFTXT:30)) + ''')';

                Write qddssrc @ASpecDs;

e002         EndIf;
e001      EndIf;

          End-Proc;

          Dcl-Proc WriteColumnHeadingLine;

          Dcl-Pi WriteColumnHeadingLine;
          End-Pi;

          Dcl-s @ColHdg Char(60);

b001      If whchd1 <> *Blanks;
             ClearFields();
             @ColHdg = 'COLHDG(''' + %Trim(whchd1) + '''';
b002         If whchd2 <> *Blanks;
                @Text = %Trim(@ColHdg) + ' - ';
                Write qddssrc @ASpecDs;

                ClearFields();
                @ColHdg = '''' + %Trim(whchd2) + '''';
b003            If whchd3 <> *Blanks;
                   @Text = %Trim(@ColHdg) + ' - ';
                   Write qddssrc @ASpecDs;

                   ClearFields();
                   @ColHdg = '''' + %Trim(whchd3) + ''')';
x003            Else;
                   @ColHdg = %Trimr(@ColHdg) + ')';
e003            EndIf;
x002         Else;
                @ColHdg = %Trimr(@ColHdg) + ')';
e002         EndIf;
b002         If (%SubSt(@ColHdg:36:1) = ')');
                @Text = @ColHdg;
                Write qddssrc @ASpecDs;
x002         Else;
                @Text1 = %SubSt(@ColHdg:1:35);
                @Text2 = %SubSt(@ColHdg:36);
b003            If @Text2 <> *Blanks;
                   @Text = @Text1 + '-';
                   Write qddssrc @ASpecDs;
                   @Text = @Text2;
                   Write qddssrc @ASpecDs;
x003            Else;
                   @Text = @Text1;
                   Write qddssrc @ASpecDs;
e003            EndIf;
e002         EndIf;
e001      EndIf;

          End-Proc;

          Dcl-Proc WriteJoinFileRcdFmt;

          Dcl-Pi WriteJoinFileRcdFmt;
          End-Pi;

          Dcl-s @PFileName Char(10) Dim(10) Inz(*Blanks);

b001      If not %Open(qafdjoin);
             Open qafdjoin;
e001      EndIf;

          Read qwhfdjn;
b001      Dow not %Eof(qafdjoin);

b002         If jndial = 1;

                @R = 'R';
                @Field = whname;
                @Text = 'JFILE(' + %Trim(jndnam);
                @PFileName(jndial) = jndnam;

x002         Else;

b003            If @PFileName(jndial) = *Blanks;
                   @PFileName(jndial) = jndnam;
                   @Text = %Trim(@Text) + ' ' + jndnam;
e003            EndIf;
e002         EndIf;

             Read qwhfdjn;
e001      EndDo;

          @Text = %Trim(@Text) + ')';

          Write qddssrc @ASpecDs;

          Clear @R;

          ClearFields();

          Clear @R;
          Close qafdjoin;

          End-Proc;

          Dcl-Proc WriteJoinFileJRec;

          Dcl-Pi WriteJoinFileJRec;
             @Pos Like(jndial) Const;
          End-Pi;

          Dcl-s @First Ind Inz(*Off);

b001      If not %Open(qafdjoin);
             Open qafdjoin;
e001      EndIf;

b001      If not %Open(qafdjoin);
             Open qafdjoin;
e001      EndIf;

          Read qwhfdjn;
b001      Dow not %Eof(qafdjoin);

b002         If jndial = @Pos;

b003            If Not @First;

                   @R = 'J';
                   @Text = 'JOIN(' + %Char(jnjfrm) + ' '
                                   + %Char(jnjto) + ')';
                   Write qddssrc @ASpecDs;
                   @First = *On;

e003            EndIf;

b002            If jnjfd1 <> *Blanks;
                   ClearFields();
                   @Text = 'JFLD(' + %Trim(jnjfd1) + ' '
                                   + %Trim(jnjfd2) + ')';
                   Write qddssrc @ASpecDs;
e003            EndIf;
e002         EndIf;

             Read qwhfdjn;
e001      EndDo;

          Close qafdjoin;

          End-Proc;

          Dcl-Proc WriteSelect;

          Dcl-Pi WriteSelect;
          End-Pi;

          Dcl-s @a         Packed(3:0)  Inz(*Zeros);
          Dcl-s @ValuesSeq Packed(3:0)  Inz(*Zeros);
          Dcl-s @ValuesFld Like(sofld)  Inz(*Blanks);
          Dcl-s @Values    Like(sovalu) Inz(*Blanks) Dim(50);
          Dcl-s @ValuesInd Ind          Inz(*Off);

          Open qafdselo;
          Read qwhfdso;
b001      Dow Not %Eof(qafdselo);

             ClearFields();
b002         If sorule <> *Blanks;
b003            If socomp = 'VA';
                   @ValuesInd          = *On;
                   @ValuesSeq         += 1;
                   @Values(@ValuesSeq) = sovalu;
                   @ValuesFld          = sofld;
x003            Else;

b004               If @ValuesInd;
b005                  For @a = 1 To @ValuesSeq;
B006                     If @a = 1;
                            @Text = 'VALUES(' + @Values(1);
x006                     Else;
                            @Text = %Trim(@Text) + ' ' + @Values(@a);
e006                     EndIf;
e005                  EndFor;

                      @Field = @ValuesFld;
                      @Text  = %Trim(@Text) + ')';
                      Write qddssrc @ASpecDs;
                      Reset @ValuesInd;
                      Reset @ValuesSeq;
                      Reset @Values;
                      Reset @ValuesFld;

e004               EndIf;

b004               If sorule = 'S'
                   Or sorule = 'O';
                      @R = sorule;
x004               Else;
b005                  If sorule = 'A';
                         Clear @R;
e005                  EndIf;
e004               EndIf;

b004               If sofld <> *Blanks;
                      @Field = sofld;
                      @Text = 'COMP(' + socomp + ' ' + %Trim(sovalu) + ')';
x004               Else;
                      @Text = 'ALL';
e004               EndIf;

                   Write qddssrc @ASpecDs;
e003            EndIf;
e002         EndIf;

             Read qwhfdso;
             @Seq += 1;

e001      EndDo;

          Close qafdselo;

          End-Proc;

          Dcl-Proc GetCommandKeys;

          Dcl-Pi GetCommandKeys;
             @DisplayFileRcd Char(30) Const;
          End-Pi;

          /define mflores136
          /define mflores141
          /copy qcpysrc,mflores
          /undefine mflores136
          /undefine mflores141

          Dcl-Ds @ReturnValue;
             @Ind Char(1) Dim(99);
          End-Ds;

          Dcl-Ds @CmdKey;
             @Cmd Char(2);
             @Key Zoned(2);
          End-Ds;

          Dcl-s @Return Char(10)  Inz(*Blanks) Dim(30);
          Dcl-s @Start  Packed(5) Inz(*Zeros);
          Dcl-s @a      Zoned(2)  Inz(*Zeros);
          Dcl-s @b      Zoned(2)  Inz(30);

b001      If @GetRecordLevelCmdKeys(@DisplayFileRcd: @ReturnValue);

b002         For @a = 1 To 24;

                @b += 1;

b003            If @Ind(@a) = *On;
b004               If @Ind(@b) = *On;

                      @Cmd = 'CA';
                      @Key = @a;

x004               Else;

                      @Cmd = 'CF';
                      @Key = @a;

e004               EndIf;

                   @Text = @CmdKey;

                   Write qddssrc @ASpecDs;

e003            EndIf;

                ClearFields();

e002         EndFor;
e001      EndIf;

b001      If @GetRecordCommandKeys(@DisplayFileRcd: @Return);
b006         For @Start = 1 To 16;
b007            If @Return(@Start) <> *Blanks;

                   @Text = @Return(@Start);
                   Write qddssrc @ASpecDs;
                   Clear @R;
                   ClearFields();

e007            EndIf;
e006         EndFor;
e001      EndIf;

          End-Proc;
